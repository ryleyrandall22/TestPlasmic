// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: feQAHrCNoVA9TpipNUrgy5
// Component: EywK_NuRYHFH
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: jQm6kp0V2xX/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: 0DrxdjD45dkx/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: XBqq8GMx7JA/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import { useScreenVariants as useScreenVariants_6ZOnqyGdYzmB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6zONQYGdYzmB_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: feQAHrCNoVA9TpipNUrgy5/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: EywK_NuRYHFH/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tw1oSK1K5tE/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: ZnuAWf87MEWZ/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array("bagtext");

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6ZOnqyGdYzmB()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__o8Qx
            )}
          >
            {"Welcome to your first page."}
          </h1>

          <Button
            className={classNames("__wab_instance", sty.button__jKnJl)}
            color={"softYellow"}
            link={"https://google.com"}
            shape={"sharp"}
            showEndIcon={true}
            showStartIcon={true}
          />

          <div
            data-plasmic-name={"hey"}
            data-plasmic-override={overrides.hey}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.hey
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {
                  "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Code"}
              </span>
              <React.Fragment>
                {
                  " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                }
              </React.Fragment>
            </React.Fragment>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__kmy2F)}>
            <GraphqlFetcher
              data-plasmic-name={"graphQlFetcher"}
              data-plasmic-override={overrides.graphQlFetcher}
              className={classNames("__wab_instance", sty.graphQlFetcher)}
              dataName={"fetchedData"}
              errorDisplay={
                <ph.DataCtxReader>
                  {$ctx => "Error fetching data"}
                </ph.DataCtxReader>
              }
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
              }
              method={"POST"}
              noLayout={false}
              previewErrorDisplay={false}
              previewSpinner={false}
              query={{
                query:
                  "{\n  characters {\n    results {\n      name\n      species\n      image\n      gender\n    }\n  }\n}\n",
                variables: {}
              }}
              url={"https://rickandmortyapi.com/graphql"}
            >
              <ph.DataCtxReader>
                {$ctx =>
                  (() => {
                    try {
                      return $ctx.fetchedData.data.characters.results;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })().map((currentItem, currentIndex) => (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9RrNa
                      )}
                      key={currentIndex}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aGhZh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qCSe
                            )}
                          >
                            {(() => {
                              try {
                                return currentItem.name;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Enter some text";
                                }
                                throw e;
                              }
                            })()}
                          </div>

                          <p.PlasmicImg
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return currentItem.image;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      ) : null}
                    </div>
                  ))
                }
              </ph.DataCtxReader>
            </GraphqlFetcher>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m7Lpq
              )}
            >
              {"Enter some text"}
            </div>

            <div
              data-plasmic-name={"banner"}
              data-plasmic-override={overrides.banner}
              className={classNames(projectcss.all, sty.banner)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"foreground2"}
                data-plasmic-override={overrides.foreground2}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground2)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__l3Fi)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__nmmh8
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us"
                      : "Contact us"}
                  </h1>
                </p.Stack>
              </p.Stack>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"clientsSection5"}
                data-plasmic-override={overrides.clientsSection5}
                hasGap={true}
                className={classNames(projectcss.all, sty.clientsSection5)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mpD0)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns___3Kkio)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__xaojG)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sJqPa
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Proactively architect worldwide sources, then globally implement enabled  users, then collaboratively innovate unique expertise, then continually  strategize excellent markets."
                          : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column___5F1OH)}
                    >
                      <p.Stack
                        as={"pre"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.pre,
                          sty.columns__ugXuK
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__oZmB2
                          )}
                        >
                          <div
                            data-plasmic-name={"formWrapper"}
                            data-plasmic-override={overrides.formWrapper}
                            className={classNames(
                              projectcss.all,
                              sty.formWrapper
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns___08OEt
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__xf7HK
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uxKJ
                                  )}
                                >
                                  {"First name"}
                                </div>

                                {true ? (
                                  <TextInput
                                    data-plasmic-name={"name"}
                                    data-plasmic-override={overrides.name}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.name
                                    )}
                                    endIcon={
                                      true ? (
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___1VmuH
                                          )}
                                          role={"img"}
                                        />
                                      ) : null
                                    }
                                    placeholder={""}
                                  />
                                ) : null}

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___3Ow2Y
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Hey DUde\n",
                                    value: args.bagtext,
                                    className: classNames(sty.slotTargetBagtext)
                                  })}
                                </div>
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__oItfK
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dBZn
                                  )}
                                >
                                  {"Last name"}
                                </div>

                                <TextInput
                                  data-plasmic-name={"name2"}
                                  data-plasmic-override={overrides.name2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.name2
                                  )}
                                  placeholder={""}
                                />
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__bjOq1
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__bpOnB
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__duHSl
                                  )}
                                >
                                  {"Email address"}
                                </div>

                                <TextInput
                                  data-plasmic-name={"name5"}
                                  data-plasmic-override={overrides.name5}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.name5
                                  )}
                                  placeholder={""}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__kmbea
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vnYX
                                  )}
                                >
                                  {"Phone number"}
                                </div>

                                <TextInput
                                  data-plasmic-name={"name3"}
                                  data-plasmic-override={overrides.name3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.name3
                                  )}
                                  placeholder={""}
                                />
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__dyYlj
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__nvxKi
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lTd2L
                                  )}
                                >
                                  {"Company"}
                                </div>

                                <TextInput
                                  data-plasmic-name={"name4"}
                                  data-plasmic-override={overrides.name4}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.name4
                                  )}
                                  placeholder={""}
                                />
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__cuLal
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__jglLb
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__i5Vpl
                                  )}
                                >
                                  {"Message"}
                                </div>

                                <textarea
                                  data-plasmic-name={"textarea"}
                                  data-plasmic-override={overrides.textarea}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.textarea,
                                    sty.textarea
                                  )}
                                  value={""}
                                />

                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hgovg
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__fUwlq
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__yQuTm
                                        )}
                                      >
                                        {"Submit"}
                                      </div>
                                    </Button>
                                  </div>
                                ) : null}
                              </div>
                            </div>
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__gw3Gd
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yz6Wa
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__k0Yqu
                                )}
                              >
                                {"Address"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cmbsp
                                )}
                              >
                                {
                                  "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                                }
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__je7Ca
                                )}
                              >
                                {"xyz@companyname.com"}
                              </div>

                              <h4
                                data-plasmic-name={"h4"}
                                data-plasmic-override={overrides.h4}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4
                                )}
                              >
                                {"Address 2"}
                              </h4>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__n2XnQ
                                )}
                              >
                                {
                                  "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                                }
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kHrU
                                )}
                              >
                                {"xyz@companyname.com"}
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      </p.Stack>
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}

            <div
              data-plasmic-name={"footerTopSection"}
              data-plasmic-override={overrides.footerTopSection}
              className={classNames(projectcss.all, sty.footerTopSection)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__okfTl)}>
                <div className={classNames(projectcss.all, sty.freeBox__beh2)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground3"}
                    data-plasmic-override={overrides.foreground3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground3)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__giQ9X)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___2YcNs
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Take your business to the next level"
                          : "Work with us."}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k6Ho
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Rapidiously revolutionize future-proof niches, and authoritatively \nrestore user-centric e-markets."
                          : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xrNd5)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qyrx9
                        )}
                      >
                        <p.Stack
                          as={"button"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            sty.button__fyEIz
                          )}
                        >
                          {false ? (
                            <Icon29Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__isoSt
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Arju
                            )}
                          >
                            {"Get IN Touch"}
                          </div>

                          {false ? (
                            <Icon29Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__k2FU
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ze84C)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox___2NWn)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"rowWrapper"}
                    data-plasmic-override={overrides.rowWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rowWrapper)}
                  >
                    <div
                      data-plasmic-name={"colmn1"}
                      data-plasmic-override={overrides.colmn1}
                      className={classNames(projectcss.all, sty.colmn1)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___70Rb
                        )}
                      >
                        {"About us"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wQxj
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "© Company. All rights reserved. This site proudly built with "
                            }
                          </React.Fragment>
                          {
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link__f8Rdk
                              )}
                              component={Link}
                              href={"https://www.plasmic.app"}
                              platform={"nextjs"}
                            >
                              {"Plasmic"}
                            </p.PlasmicLink>
                          }

                          <React.Fragment>{"."}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"colmn2"}
                      data-plasmic-override={overrides.colmn2}
                      className={classNames(projectcss.all, sty.colmn2)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__eyPN
                        )}
                      >
                        {"Links"}
                      </h3>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link___2D1G
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"Services"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__aejkf
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"About us"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__mJdWa
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"Testimonials"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__uqb72
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"Blog"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__run0Y
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"Contact us\n"}
                      </p.PlasmicLink>
                    </div>

                    <div
                      data-plasmic-name={"colmn22"}
                      data-plasmic-override={overrides.colmn22}
                      className={classNames(projectcss.all, sty.colmn22)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___2R4Ar
                        )}
                      >
                        {"Nav Links"}
                      </h3>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__tNxs3
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"Services"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__y34Hj
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"About us"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__zv53G
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"Testimonials"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__b1Dcz
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"Blog"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link___4ER7V
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"Contact us\n"}
                      </p.PlasmicLink>
                    </div>

                    <div
                      data-plasmic-name={"colmn3"}
                      data-plasmic-override={overrides.colmn3}
                      className={classNames(projectcss.all, sty.colmn3)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__j5Po
                        )}
                      >
                        {"Contact "}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jsHEs
                        )}
                      >
                        {"1234 Lorem Ipsum .\nLorem Ipsum , GA 30308"}
                      </div>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__wc5Pt
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"xyz@company.com"}
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__yji45
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"1234567890"}
                      </p.PlasmicLink>
                    </div>
                  </p.Stack>
                </div>
              ) : null}
            </div>
          </div>

          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET"}
            noLayout={false}
            url={"https://www.barryai.com/api/data/story"}
          >
            <ph.DataCtxReader>
              {$ctx =>
                (() => {
                  try {
                    return $ctx.fetchedData;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return [];
                    }
                    throw e;
                  }
                })().map((currentItem, currentIndex) => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qp1Db)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ttN3
                      )}
                    >
                      {(() => {
                        try {
                          return currentItem.title;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </div>
                  </div>
                ))
              }
            </ph.DataCtxReader>
          </DataFetcher>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "hey",
    "graphQlFetcher",
    "img",
    "banner",
    "foreground2",
    "clientsSection5",
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "name4",
    "textarea",
    "h4",
    "footerTopSection",
    "foreground3",
    "rowWrapper",
    "colmn1",
    "colmn2",
    "colmn22",
    "colmn3",
    "httpApiFetcher"
  ],

  hey: ["hey"],
  graphQlFetcher: ["graphQlFetcher", "img"],
  img: ["img"],
  banner: ["banner", "foreground2"],
  foreground2: ["foreground2"],
  clientsSection5: [
    "clientsSection5",
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "name4",
    "textarea",
    "h4"
  ],

  formWrapper: [
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "name4",
    "textarea"
  ],

  name: ["name"],
  name2: ["name2"],
  name5: ["name5"],
  name3: ["name3"],
  name4: ["name4"],
  textarea: ["textarea"],
  h4: ["h4"],
  footerTopSection: ["footerTopSection", "foreground3"],
  foreground3: ["foreground3"],
  rowWrapper: ["rowWrapper", "colmn1", "colmn2", "colmn22", "colmn3"],
  colmn1: ["colmn1"],
  colmn2: ["colmn2"],
  colmn22: ["colmn22"],
  colmn3: ["colmn3"],
  httpApiFetcher: ["httpApiFetcher"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hey: makeNodeComponent("hey"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    img: makeNodeComponent("img"),
    banner: makeNodeComponent("banner"),
    foreground2: makeNodeComponent("foreground2"),
    clientsSection5: makeNodeComponent("clientsSection5"),
    formWrapper: makeNodeComponent("formWrapper"),
    _name: makeNodeComponent("name"),
    name2: makeNodeComponent("name2"),
    name5: makeNodeComponent("name5"),
    name3: makeNodeComponent("name3"),
    name4: makeNodeComponent("name4"),
    textarea: makeNodeComponent("textarea"),
    h4: makeNodeComponent("h4"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    foreground3: makeNodeComponent("foreground3"),
    rowWrapper: makeNodeComponent("rowWrapper"),
    colmn1: makeNodeComponent("colmn1"),
    colmn2: makeNodeComponent("colmn2"),
    colmn22: makeNodeComponent("colmn22"),
    colmn3: makeNodeComponent("colmn3"),
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
